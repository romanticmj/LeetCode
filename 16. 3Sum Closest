Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Subscribe to see which companies asked this question.

/*******************************************************/

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int min = 99999;
        int min_sum;
        if(nums.size() < 3)
        return 0;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size() - 2; i++)
        {
            int j = i + 1;
            int k = nums.size() - 1;
            while(j < k)
            {
                int sum = nums[i] + nums[j] + nums[k];
                if(sum == target)
                {
                    return sum;
                }
                else if(sum < target)
                {
                    if(abs(target - sum) < min)
                    {
                        min_sum = sum;
                        min = abs(target - sum);
                    }
                    j++;
                }
                else
                {
                    if(abs(target - sum) < min)
                    {
                        min_sum = sum;
                        min = abs(target - sum);
                    }
                    k--;
                }
            }
        }
        return min_sum;
    }
};
