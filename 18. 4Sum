Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
可以使用set，直接避免重复
/******************************************************/
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        if(nums.size() < 4) return res;
        
        vector<int> Allnum = nums;
        sort(Allnum.begin(),Allnum.end());
        for(int i = 0; i < Allnum.size() - 3; i++)
        {
            for(int j = i + 1; j < Allnum.size() - 2; j++)
            {
                int p = j + 1;
                int q = Allnum.size() - 1;
                while(p < q)
                {
                    int sum = Allnum[i] + Allnum[j] + Allnum[p] + Allnum[q];
                    if(sum < target)
                    {
                        p++;
                    }
                    else if(sum > target)
                    {
                        q--;
                    }
                    else
                    {
                        vector<int> temp;
                        temp.push_back(Allnum[i]);
                        temp.push_back(Allnum[j]);
                        temp.push_back(Allnum[p]);
                        temp.push_back(Allnum[q]);
                        vector<vector<int>>::iterator it;
                        it = find(res.begin(), res.end(), temp);
                        if(it == res.end())
                        {
                             res.push_back(temp);
                        }
                        p++;
                        q--;
                    }
                }
            }
        }
        return res;
    }
};
