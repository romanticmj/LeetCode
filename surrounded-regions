#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <queue>
#include <windows.h>
#include <iomanip>
#include <map>
using namespace std;
/*
Given a 2D board containing'X'and'O', capture all regions surrounded by'X'.
A region is captured by flipping all'O's into'X's in that surrounded region .
For example,
X X X X
X O O X
X X O X
X O X X

After running your function, the board should be:
X X X X
X X X X
X X X X
X O X X*/

struct mmpoint{
	mmpoint(int a, int b) :x(a), y(b){};
	int x, y;
};

bool find_O(vector<vector<char>> &board,int **visited, int &x, int&y){
	for (int i = 0; i < board.size();i++)
	{
		for (int j = 0; j < board.size(); j++)
		{
			if (board[i][j] == 'O' && visited[i][j] == 0)
			{
				x = i;
				y = j;
				return true;
			}
		}
	}
	return false;
}

void isSurroundByXandFlipped(vector<vector<char>> &board, int ** visited, const int x, const int y){
	vector<mmpoint> Store;
	mmpoint temp(x, y);
	queue<mmpoint> Q;
	Q.push(temp);
	visited[x][y] = 1;
	bool canFlipped = true;
	while (!Q.empty()){
		mmpoint temp = Q.front();
		Store.push_back(temp);
		//左
		if (canFlipped&&temp.x == 0)
		{
			canFlipped = false;
		}
		else if (!visited[temp.x - 1][temp.y]&&board[temp.x - 1][temp.y] == 'O')
		{
			visited[temp.x - 1][temp.y] = 1;
			Q.push(mmpoint(temp.x - 1, temp.y));
		}
		//下
		if (canFlipped&&temp.y == 0)
		{
			canFlipped = false;
		}
		else if (!visited[temp.x][temp.y - 1]&&board[temp.x][temp.y - 1] == 'O')
		{
			visited[temp.x][temp.y - 1] = 1;
			Q.push(mmpoint(temp.x, temp.y - 1));
		}
		//右
		if (canFlipped&&temp.x == board.size() - 1)
		{
			canFlipped = false;
		}
		else if (!visited[temp.x + 1][temp.y]&&board[temp.x + 1][temp.y] == 'O')
		{
			visited[temp.x + 1][temp.y] = 1;
			Q.push(mmpoint(temp.x + 1, temp.y));
		}
		//上
		if (canFlipped&&temp.y == board.size() - 1)
		{
			canFlipped = false;
		}
		else if (!visited[temp.x][temp.y + 1]&&board[temp.x][temp.y + 1] == 'O')
		{
			visited[temp.x][temp.y + 1] = 1;
			Q.push(mmpoint(temp.x, temp.y + 1));
		}
		Q.pop();
	}
	for (int i = 0; i < Store.size();i++)
	{
	
		board[Store[i].x][Store[i].y] = canFlipped ? 'X' : 'O';
	}
}

void solve(vector<vector<char>> &board) {
	int **visited = new int *[board.size()];
	for (int i = 0; i < board.size(); i++) {
		visited[i] = new int[board.size()];
		memset(visited[i], 0, sizeof(int) * board.size());
	}
	int x, y;
	while(find_O(board, visited, x, y))
		isSurroundByXandFlipped(board, visited, x, y);
}

void print(vector < vector<char> >&board){
	for (int i = 0; i < board.size(); i++)
	{
		for (int j = 0; j < board.size(); j++)
		{
			cout << board[i][j] << " ";
		}
		cout << endl;
	}
}

int main(){
	
	vector<vector<char>> board{ {'O', 'X', 'X', 'X'},
								{'X', 'O', 'X', 'X'},
								{'X', 'O' ,'O' ,'X'},
								{'X', 'O', 'X', 'X'}};
	solve(board);
	print(board);
	return 0;
  }
