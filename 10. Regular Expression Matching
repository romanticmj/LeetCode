Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true
Subscribe to see which companies asked this question.

/**************************************/
class Solution {
public:
    bool isMatch(string s, string p) {
        if((s == "")&&(isClear(p)))
        {
            return true;
        }
        else if((s == "")&&(!isClear(p)))
        {
            return false;
        }
        int match_id = 0;
        int to_match_id = 0;
        if((s != "")&&(p.size() == 0))
        {
            return false;
        }
        if(isSame(s[match_id], p[to_match_id]))
        {
            if(p[to_match_id + 1] == '*')
            {
                if(isMatch(s.substr(1),p))
                {
                    return true;
                }
                else if(isMatch(s, p.substr(2)))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                if(isMatch(s.substr(1), p.substr(1)))
                    return true;
                else 
                    return false;
            }
        }
        else if(p[to_match_id + 1] == '*')
        {
            return isMatch(s,p.substr(2));
        }
        return false;
    }
    
    bool isClear(string p)
    {
        int start = 0;
        while(p[start])
        {
            if(p[start] == '*')
            {
                start++;
            }
            else if(p[start + 1] == '*')
            {
                start += 2;
            }
            else return false;
        }
        return true;
    }
    
    bool isSame(char a, char b)
    {
        if(b == '.')
        {
            return true;
        }
        else if(a == b)
        {
            return true;
        }
        else 
        return false;
    }
};
