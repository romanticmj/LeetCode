There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
Subscribe to see which companies asked this question.


/*************************************************************/
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        int media_id = (m + n) / 2;
        int k = 0;
        int nums1_id = 0;
        int nums2_id = 0;
        bool tag = false;
        if( (m + n)%2 == 0)
        {
            media_id;
            tag = true;
        }
        vector<int> num;
        while(((nums1_id < m)&&(nums2_id < n)) && (k <= media_id))
        {
            if((nums1[nums1_id]) <= nums2[nums2_id])
            {
                k++;
                num.push_back(nums1[nums1_id]);
                nums1_id++;
            }
            else if((nums2[nums1_id]) < nums1[nums2_id])
            {
                k++;
                num.push_back(nums2[nums2_id]);
                nums2_id++;
            }
        }
        if((nums1_id < m)&& (k <= media_id))
        {
            for(nums1_id; k <= media_id;k++)
            {
                num.push_back(nums1[nums1_id++]);
            }
        }
        else if((nums2_id < n)&&(k <= media_id))
        {
            for(nums2_id; k <= media_id;k++)
            {
                num.push_back(nums2[nums2_id++]);
            }
        }
        if(tag)
        {
            return (double)(((double)num[media_id] + (double)num[media_id - 1] )/ 2) ;
        }
        else
        {
            return (double)num[media_id];
        }
    }
};
